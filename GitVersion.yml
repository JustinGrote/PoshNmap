#This configures Gitversion for the Gitlab Flow Branching Style
#Master - Always deployable, will deploy to staging for programs, or to prerelease for libraries
#Production - Always deployable, will deploy to production. You should PR master to production
#Feature/MyFeature - Do development here and PR to master. Should not be merged unless it passes all tests
#Release/v0.x.0 - Prepare a release separate from master for stabilization

#Other recommendations
#Fix forward by committing hotfixes to master and then merging or cherrypicking them to production
#If you want to prepare a stable release

mode: ContinuousDeployment
branches:
  master:
    tag: beta
    increment: Patch
  release:
    tag: rc

#Custom commit messages to support Conventional Commit syntax
major-version-bump-message: (^(breaking|major)(\(.*\))?:)|(\+semver:\s?(breaking|major))|BREAKING CHANGE(:)
minor-version-bump-message: (^(feat(ure)?|minor)(\(.*\))?:)|(\+semver:\s?(feat(ure)?|minor))
patch-version-bump-message: (^((bug)?fix|patch|perf|refactor)(\(.*\))?:)|(\+semver:\s?((bug)?fix|patch))
no-bump-message: (^(none|skip|build|ci|docs|style|test)(\(.*\))?:)|(\+semver:\s?(none|skip))

#Set the build numbers to be xxx, example 0.1.0-myfeature001 or 0.2.1-beta001. This allows for longer feature branch names, and can be increased for more active projects
#You should set this to the number of commits you expect to have for a given branch before merging.
#For instance, if vNext is never going to contain more than 99 commits before you push it to master as a new version, you can set this to 2. 3 is good for all but the largest projects.
legacy-semver-padding: 3
build-metadata-padding: 3
commits-since-version-source-padding: 3